# This workflow handles building and publishing your Docker image to GitHub Container Registry
name: Build and Push Docker Image

# Controls when the workflow runs
on:
  push:
    branches: [ main ]    # Runs on pushes to main branch
    tags: [ 'v*.*.*' ]   # Runs when you create version tags (like v1.0.0)
  pull_request:
    branches: [ main ]    # Runs when PRs target main branch

# Define reusable variables
env:
  REGISTRY: ghcr.io                    # GitHub Container Registry address
  IMAGE_NAME: ${{ github.repository }} # Uses your repository name as image name

# The jobs that make up the workflow
jobs:
  build-and-push:
    runs-on: ubuntu-latest    # Uses latest Ubuntu runner
    permissions:              
      contents: read         # Needed to check out code
      packages: write        # Needed to push to GitHub packages

    steps:
      # Step 1: Gets your code from GitHub
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Logs into GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Generates Docker metadata including tags
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Updated tags configuration to include 'latest'
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      # Step 4: Builds and pushes the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .                                    # Build context is repository root
          push: ${{ github.event_name != 'pull_request' }} # Only push on non-PR events
          tags: ${{ steps.meta.outputs.tags }}         # Uses tags from metadata step
          labels: ${{ steps.meta.outputs.labels }}     # Uses labels from metadata step
